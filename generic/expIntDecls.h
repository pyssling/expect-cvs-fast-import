/*
 * expIntDecls.h --
 *
 *	Declarations of functions in the platform independent internal
 *	Expect API.
 *
 * ----------------------------------------------------------------------------
 *
 * Written by: Don Libes, libes@cme.nist.gov, NIST, 12/3/90
 * 
 * Design and implementation of this program was paid for by U.S. tax
 * dollars.  Therefore it is public domain.  However, the author and NIST
 * would appreciate credit if this program or parts of it are used.
 * 
 * Copyright (c) 1997 Mitel Corporation
 *	work by Gordon Chaffee <chaffee@bmrc.berkeley.edu> for the WinNT port.
 *
 * Copyright (c) 2001-2002 Telindustrie, LLC
 *	work by David Gravereaux <davygrvy@pobox.com> for any Win32 OS.
 *
 * ----------------------------------------------------------------------------
 * URLs:    http://expect.nist.gov/
 *	    http://expect.sf.net/
 *	    http://bmrc.berkeley.edu/people/chaffee/expectnt.html
 * ----------------------------------------------------------------------------
 * RCS: @(#) $Id: expIntDecls.h,v 1.1.4.5 2002/02/13 02:39:41 davygrvy Exp $
 * ----------------------------------------------------------------------------
 */

#ifndef _EXPINTDECLS
#define _EXPINTDECLS

/*
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the exp.decls script.
 */

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

/* Slot 0 is reserved */
/* 1 */
EXTERN int		Exp_StringMatch _ANSI_ARGS_((CONST char * string, 
				CONST char * pattern, int * offset));
/* 2 */
EXTERN int		Exp_StringMatch2 _ANSI_ARGS_((CONST char * string, 
				CONST char * pattern));
/* Slot 3 is reserved */
/* 4 */
EXTERN struct exp_i *	exp_new_i_complex _ANSI_ARGS_((Tcl_Interp * interp, 
				char * arg, int duration, 
				Tcl_VarTraceProc * updateproc, 
				CONST char * msg));
/* 5 */
EXTERN struct exp_i *	exp_new_i_simple _ANSI_ARGS_((struct exp_f * fd, 
				int duration));
/* 6 */
EXTERN struct exp_fs_list * exp_new_fs _ANSI_ARGS_((struct exp_f * f));
/* 7 */
EXTERN void		exp_free_i _ANSI_ARGS_((Tcl_Interp * interp, 
				struct exp_i * i, 
				Tcl_VarTraceProc * updateproc));
/* 8 */
EXTERN void		exp_free_fs _ANSI_ARGS_((
				struct exp_fs_list * fs_first));
/* 9 */
EXTERN void		exp_free_fs_single _ANSI_ARGS_((
				struct exp_fs_list * fs));
/* 10 */
EXTERN void		exp_i_update _ANSI_ARGS_((Tcl_Interp * interp, 
				struct exp_i * i));
/* 11 */
EXTERN void		exp_pty_exit _ANSI_ARGS_((void));
/* 12 */
EXTERN void		exp_init_spawn_ids _ANSI_ARGS_((Tcl_Interp * interp));
/* 13 */
EXTERN void		exp_init_pty _ANSI_ARGS_((Tcl_Interp * interp));
/* 14 */
EXTERN void		exp_init_tty _ANSI_ARGS_((Tcl_Interp * interp));
/* 15 */
EXTERN void		exp_init_stdio _ANSI_ARGS_((void));
/* 16 */
EXTERN void		exp_init_sig _ANSI_ARGS_((void));
/* 17 */
EXTERN void		exp_init_trap _ANSI_ARGS_((void));
/* 18 */
EXTERN void		exp_init_unit_random _ANSI_ARGS_((void));
/* 19 */
EXTERN void		exp_init_spawn_id_vars _ANSI_ARGS_((
				Tcl_Interp * interp));
/* 20 */
EXTERN void		exp_adjust _ANSI_ARGS_((struct exp_f * f));
/* 21 */
EXTERN void		exp_ecmd_remove_f_direct_and_indirect _ANSI_ARGS_((
				Tcl_Interp * interp, struct exp_f * f));
/* 22 */
EXTERN void		exp_rearm_sigchld _ANSI_ARGS_((Tcl_Interp * interp));
/* 23 */
EXTERN struct exp_f *	exp_chan2f _ANSI_ARGS_((Tcl_Interp * interp, 
				CONST char * chan, int opened, int adjust, 
				CONST char * msg));
/* 24 */
EXTERN int		exp_fcheck _ANSI_ARGS_((Tcl_Interp * interp, 
				struct exp_f * f, int opened, int adjust, 
				CONST char * msg));
/* 25 */
EXTERN int		exp_close _ANSI_ARGS_((Tcl_Interp * interp, 
				struct exp_f * f));
/* 26 */
EXTERN void		exp_strftime _ANSI_ARGS_((char * format, 
				const struct tm * timeptr, 
				Tcl_DString * dstring));
/* 27 */
EXTERN void		exp_create_commands _ANSI_ARGS_((Tcl_Interp * interp, 
				struct exp_cmd_data * c));
/* 28 */
EXTERN void		exp_tty_break _ANSI_ARGS_((Tcl_Interp * interp, 
				struct exp_f * f));
/* 29 */
EXTERN void		exp_event_disarm _ANSI_ARGS_((struct exp_f * f));
/* 30 */
EXTERN void		exp_arm_background_filehandler _ANSI_ARGS_((
				struct exp_f * f));
/* 31 */
EXTERN void		exp_disarm_background_filehandler _ANSI_ARGS_((
				struct exp_f * f));
/* 32 */
EXTERN void		exp_disarm_background_filehandler_force _ANSI_ARGS_((
				struct exp_f * f));
/* 33 */
EXTERN void		exp_unblock_background_filehandler _ANSI_ARGS_((
				struct exp_f * f));
/* 34 */
EXTERN void		exp_block_background_filehandler _ANSI_ARGS_((
				struct exp_f * f));
/* 35 */
EXTERN int		exp_get_next_event _ANSI_ARGS_((Tcl_Interp * interp, 
				struct exp_f ** masters, int n, 
				struct exp_f ** master_out, int timeout, 
				int key));
/* 36 */
EXTERN int		exp_get_next_event_info _ANSI_ARGS_((
				Tcl_Interp * interp, struct exp_f * fd, 
				int ready_mask));
/* 37 */
EXTERN struct exp_f *	exp_f_find _ANSI_ARGS_((Tcl_Interp * interp, 
				char * spawnId));
/* 38 */
EXTERN struct exp_f *	exp_f_new _ANSI_ARGS_((Tcl_Interp * interp, 
				Tcl_Channel chan, char * spawnId, int pid));
/* 39 */
EXTERN int		exp_f_new_platform _ANSI_ARGS_((struct exp_f * f));
/* 40 */
EXTERN void		exp_f_free _ANSI_ARGS_((struct exp_f * f));
/* 41 */
EXTERN void		exp_f_free_platform _ANSI_ARGS_((struct exp_f * f));
/* 42 */
EXTERN int		exp_exact_write _ANSI_ARGS_((struct exp_f * f, 
				char * buffer, int rembytes));

typedef struct ExpIntStubs {
    int magic;
    struct ExpIntStubHooks *hooks;

    void *reserved0;
    int (*exp_StringMatch) _ANSI_ARGS_((CONST char * string, CONST char * pattern, int * offset)); /* 1 */
    int (*exp_StringMatch2) _ANSI_ARGS_((CONST char * string, CONST char * pattern)); /* 2 */
    void *reserved3;
    struct exp_i * (*exp_new_i_complex) _ANSI_ARGS_((Tcl_Interp * interp, char * arg, int duration, Tcl_VarTraceProc * updateproc, CONST char * msg)); /* 4 */
    struct exp_i * (*exp_new_i_simple) _ANSI_ARGS_((struct exp_f * fd, int duration)); /* 5 */
    struct exp_fs_list * (*exp_new_fs) _ANSI_ARGS_((struct exp_f * f)); /* 6 */
    void (*exp_free_i) _ANSI_ARGS_((Tcl_Interp * interp, struct exp_i * i, Tcl_VarTraceProc * updateproc)); /* 7 */
    void (*exp_free_fs) _ANSI_ARGS_((struct exp_fs_list * fs_first)); /* 8 */
    void (*exp_free_fs_single) _ANSI_ARGS_((struct exp_fs_list * fs)); /* 9 */
    void (*exp_i_update) _ANSI_ARGS_((Tcl_Interp * interp, struct exp_i * i)); /* 10 */
    void (*exp_pty_exit) _ANSI_ARGS_((void)); /* 11 */
    void (*exp_init_spawn_ids) _ANSI_ARGS_((Tcl_Interp * interp)); /* 12 */
    void (*exp_init_pty) _ANSI_ARGS_((Tcl_Interp * interp)); /* 13 */
    void (*exp_init_tty) _ANSI_ARGS_((Tcl_Interp * interp)); /* 14 */
    void (*exp_init_stdio) _ANSI_ARGS_((void)); /* 15 */
    void (*exp_init_sig) _ANSI_ARGS_((void)); /* 16 */
    void (*exp_init_trap) _ANSI_ARGS_((void)); /* 17 */
    void (*exp_init_unit_random) _ANSI_ARGS_((void)); /* 18 */
    void (*exp_init_spawn_id_vars) _ANSI_ARGS_((Tcl_Interp * interp)); /* 19 */
    void (*exp_adjust) _ANSI_ARGS_((struct exp_f * f)); /* 20 */
    void (*exp_ecmd_remove_f_direct_and_indirect) _ANSI_ARGS_((Tcl_Interp * interp, struct exp_f * f)); /* 21 */
    void (*exp_rearm_sigchld) _ANSI_ARGS_((Tcl_Interp * interp)); /* 22 */
    struct exp_f * (*exp_chan2f) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * chan, int opened, int adjust, CONST char * msg)); /* 23 */
    int (*exp_fcheck) _ANSI_ARGS_((Tcl_Interp * interp, struct exp_f * f, int opened, int adjust, CONST char * msg)); /* 24 */
    int (*exp_close) _ANSI_ARGS_((Tcl_Interp * interp, struct exp_f * f)); /* 25 */
    void (*exp_strftime) _ANSI_ARGS_((char * format, const struct tm * timeptr, Tcl_DString * dstring)); /* 26 */
    void (*exp_create_commands) _ANSI_ARGS_((Tcl_Interp * interp, struct exp_cmd_data * c)); /* 27 */
    void (*exp_tty_break) _ANSI_ARGS_((Tcl_Interp * interp, struct exp_f * f)); /* 28 */
    void (*exp_event_disarm) _ANSI_ARGS_((struct exp_f * f)); /* 29 */
    void (*exp_arm_background_filehandler) _ANSI_ARGS_((struct exp_f * f)); /* 30 */
    void (*exp_disarm_background_filehandler) _ANSI_ARGS_((struct exp_f * f)); /* 31 */
    void (*exp_disarm_background_filehandler_force) _ANSI_ARGS_((struct exp_f * f)); /* 32 */
    void (*exp_unblock_background_filehandler) _ANSI_ARGS_((struct exp_f * f)); /* 33 */
    void (*exp_block_background_filehandler) _ANSI_ARGS_((struct exp_f * f)); /* 34 */
    int (*exp_get_next_event) _ANSI_ARGS_((Tcl_Interp * interp, struct exp_f ** masters, int n, struct exp_f ** master_out, int timeout, int key)); /* 35 */
    int (*exp_get_next_event_info) _ANSI_ARGS_((Tcl_Interp * interp, struct exp_f * fd, int ready_mask)); /* 36 */
    struct exp_f * (*exp_f_find) _ANSI_ARGS_((Tcl_Interp * interp, char * spawnId)); /* 37 */
    struct exp_f * (*exp_f_new) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Channel chan, char * spawnId, int pid)); /* 38 */
    int (*exp_f_new_platform) _ANSI_ARGS_((struct exp_f * f)); /* 39 */
    void (*exp_f_free) _ANSI_ARGS_((struct exp_f * f)); /* 40 */
    void (*exp_f_free_platform) _ANSI_ARGS_((struct exp_f * f)); /* 41 */
    int (*exp_exact_write) _ANSI_ARGS_((struct exp_f * f, char * buffer, int rembytes)); /* 42 */
} ExpIntStubs;

#ifdef __cplusplus
extern "C" {
#endif
extern ExpIntStubs *expIntStubsPtr;
#ifdef __cplusplus
}
#endif

#if defined(USE_EXP_STUBS) && !defined(USE_EXP_STUB_PROCS)

/*
 * Inline function declarations:
 */

/* Slot 0 is reserved */
#ifndef Exp_StringMatch
#define Exp_StringMatch \
	(expIntStubsPtr->exp_StringMatch) /* 1 */
#endif
#ifndef Exp_StringMatch2
#define Exp_StringMatch2 \
	(expIntStubsPtr->exp_StringMatch2) /* 2 */
#endif
/* Slot 3 is reserved */
#ifndef exp_new_i_complex
#define exp_new_i_complex \
	(expIntStubsPtr->exp_new_i_complex) /* 4 */
#endif
#ifndef exp_new_i_simple
#define exp_new_i_simple \
	(expIntStubsPtr->exp_new_i_simple) /* 5 */
#endif
#ifndef exp_new_fs
#define exp_new_fs \
	(expIntStubsPtr->exp_new_fs) /* 6 */
#endif
#ifndef exp_free_i
#define exp_free_i \
	(expIntStubsPtr->exp_free_i) /* 7 */
#endif
#ifndef exp_free_fs
#define exp_free_fs \
	(expIntStubsPtr->exp_free_fs) /* 8 */
#endif
#ifndef exp_free_fs_single
#define exp_free_fs_single \
	(expIntStubsPtr->exp_free_fs_single) /* 9 */
#endif
#ifndef exp_i_update
#define exp_i_update \
	(expIntStubsPtr->exp_i_update) /* 10 */
#endif
#ifndef exp_pty_exit
#define exp_pty_exit \
	(expIntStubsPtr->exp_pty_exit) /* 11 */
#endif
#ifndef exp_init_spawn_ids
#define exp_init_spawn_ids \
	(expIntStubsPtr->exp_init_spawn_ids) /* 12 */
#endif
#ifndef exp_init_pty
#define exp_init_pty \
	(expIntStubsPtr->exp_init_pty) /* 13 */
#endif
#ifndef exp_init_tty
#define exp_init_tty \
	(expIntStubsPtr->exp_init_tty) /* 14 */
#endif
#ifndef exp_init_stdio
#define exp_init_stdio \
	(expIntStubsPtr->exp_init_stdio) /* 15 */
#endif
#ifndef exp_init_sig
#define exp_init_sig \
	(expIntStubsPtr->exp_init_sig) /* 16 */
#endif
#ifndef exp_init_trap
#define exp_init_trap \
	(expIntStubsPtr->exp_init_trap) /* 17 */
#endif
#ifndef exp_init_unit_random
#define exp_init_unit_random \
	(expIntStubsPtr->exp_init_unit_random) /* 18 */
#endif
#ifndef exp_init_spawn_id_vars
#define exp_init_spawn_id_vars \
	(expIntStubsPtr->exp_init_spawn_id_vars) /* 19 */
#endif
#ifndef exp_adjust
#define exp_adjust \
	(expIntStubsPtr->exp_adjust) /* 20 */
#endif
#ifndef exp_ecmd_remove_f_direct_and_indirect
#define exp_ecmd_remove_f_direct_and_indirect \
	(expIntStubsPtr->exp_ecmd_remove_f_direct_and_indirect) /* 21 */
#endif
#ifndef exp_rearm_sigchld
#define exp_rearm_sigchld \
	(expIntStubsPtr->exp_rearm_sigchld) /* 22 */
#endif
#ifndef exp_chan2f
#define exp_chan2f \
	(expIntStubsPtr->exp_chan2f) /* 23 */
#endif
#ifndef exp_fcheck
#define exp_fcheck \
	(expIntStubsPtr->exp_fcheck) /* 24 */
#endif
#ifndef exp_close
#define exp_close \
	(expIntStubsPtr->exp_close) /* 25 */
#endif
#ifndef exp_strftime
#define exp_strftime \
	(expIntStubsPtr->exp_strftime) /* 26 */
#endif
#ifndef exp_create_commands
#define exp_create_commands \
	(expIntStubsPtr->exp_create_commands) /* 27 */
#endif
#ifndef exp_tty_break
#define exp_tty_break \
	(expIntStubsPtr->exp_tty_break) /* 28 */
#endif
#ifndef exp_event_disarm
#define exp_event_disarm \
	(expIntStubsPtr->exp_event_disarm) /* 29 */
#endif
#ifndef exp_arm_background_filehandler
#define exp_arm_background_filehandler \
	(expIntStubsPtr->exp_arm_background_filehandler) /* 30 */
#endif
#ifndef exp_disarm_background_filehandler
#define exp_disarm_background_filehandler \
	(expIntStubsPtr->exp_disarm_background_filehandler) /* 31 */
#endif
#ifndef exp_disarm_background_filehandler_force
#define exp_disarm_background_filehandler_force \
	(expIntStubsPtr->exp_disarm_background_filehandler_force) /* 32 */
#endif
#ifndef exp_unblock_background_filehandler
#define exp_unblock_background_filehandler \
	(expIntStubsPtr->exp_unblock_background_filehandler) /* 33 */
#endif
#ifndef exp_block_background_filehandler
#define exp_block_background_filehandler \
	(expIntStubsPtr->exp_block_background_filehandler) /* 34 */
#endif
#ifndef exp_get_next_event
#define exp_get_next_event \
	(expIntStubsPtr->exp_get_next_event) /* 35 */
#endif
#ifndef exp_get_next_event_info
#define exp_get_next_event_info \
	(expIntStubsPtr->exp_get_next_event_info) /* 36 */
#endif
#ifndef exp_f_find
#define exp_f_find \
	(expIntStubsPtr->exp_f_find) /* 37 */
#endif
#ifndef exp_f_new
#define exp_f_new \
	(expIntStubsPtr->exp_f_new) /* 38 */
#endif
#ifndef exp_f_new_platform
#define exp_f_new_platform \
	(expIntStubsPtr->exp_f_new_platform) /* 39 */
#endif
#ifndef exp_f_free
#define exp_f_free \
	(expIntStubsPtr->exp_f_free) /* 40 */
#endif
#ifndef exp_f_free_platform
#define exp_f_free_platform \
	(expIntStubsPtr->exp_f_free_platform) /* 41 */
#endif
#ifndef exp_exact_write
#define exp_exact_write \
	(expIntStubsPtr->exp_exact_write) /* 42 */
#endif

#endif /* defined(USE_EXP_STUBS) && !defined(USE_EXP_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#endif /* _EXPINTDECLS */
